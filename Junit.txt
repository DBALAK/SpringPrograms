Junit version: 4.8.1

Assert Methods:
assertEquals,assertTrue,assertFalse,fail()
assertNotNull,assertNull,assertSame,assertNotSame,assertArrayEquals

Annotations:
@Test (run the test case),
@Before,@After (runs before and after each and every test case)
@BeforeClass,@AfterClass(runs only once before and after class ),
@Ignore

Execution Procedure:
beforeClass(), afterClass() executes only once
before() executes before each test case,after() executes after each test case
In between before() and after(), each test case executes.

Test Suite:
Test suite is used to bundle a few unit test cases and run them together.
@RunWith(Suite.class) and @Suite.SuiteClasses({
   TestJunit1.class,
   TestJunit2.class
})

Timeout:
If a test case takes more time than the specified number of milliseconds, 
then JUnit will automatically mark it as failed.

@Test(expected)(@Test(expected = ArithmeticException.class))

Parameterized tests allow a developer to run the same test over and over again using different 
values. (@RunWith(Parameterized.class))


public class TestAssertions {

	@Before
	public void show(){
		System.out.println("Before test case");
	}

	@Test
	public void testAssertions() {
		// test data
		String str1 = new String("abc");
		String str2 = new String("abc");
		String str3 = null;
		String str4 = "abc";
		String str5 = "abc";

		int val1 = 5;
		int val2 = 6;

		String[] expectedArray = { "one", "two", "three" };
		String[] resultArray = { "one", "two", "three" };

		// Check that two objects are equal
		assertEquals(str1, str2);

		// Check that a condition is true
		assertTrue(val1 < val2);

		// Check that a condition is false
		assertFalse(val1 > val2);

		// Check that an object isn't null
		assertNotNull(str2);

		// Check that an object is null
		assertNull(str3);

		// Check if two object references point to the same object
		assertSame(str4, str5);

		// Check if two object references not point to the same object
		assertNotSame(str1, str3);

		// Check whether two arrays are equal to each other.
		assertArrayEquals(expectedArray, resultArray);
	}
	
	@After
	public void afterClass(){
		System.out.println("After test case");
	}
	
	@Test
	public void convertLowerToUpperCaseTestCase()
	{
		String str="BALA";
		assertEquals(str, str.toUpperCase());
	}
}